---
description: 
globs: 
alwaysApply: true
---
# Project Guidelines

## Core Principles
- Focus on high-quality, production-ready code.
- Prioritize security, maintainability, and best practices.
- Follow SOLID principles and established design patterns.
- Write secure, efficient, and readable code.

## Code Location Restrictions
- **IMPORTANT:** All code changes MUST be made ONLY within the `./upwork-job-scraper` sub-directory.
- DO NOT modify any files outside of `./upwork-job-scraper`.
- DO NOT modify the `sentry.js` file within `./upwork-job-scraper`.

## Code Style & Structure
- Use camelCase for variables and functions.
- Use PascalCase for class names.
- Keep functions focused and single-purpose.
- Use async/await for asynchronous operations.
- Add error handling with try/catch blocks.
- Include detailed console logging for debugging.
- Organize imports logically.
- Use JSDoc comments for functions and complex logic.
- Use `//` for single-line comments on the preceding line.
- Use `/* */` for multi-line documentation blocks.

## Chrome Extension Specifics (Manifest V3)
- Handle background script lifecycle correctly.
- Use `chrome.storage.sync` for settings.
- Use `chrome.storage.local` for job data.
- Implement proper cleanup in event listeners.
- Handle extension context invalidation.

## Key Functionality Rules
### Job Scraping
- Respect Upwork's rate limits.
- Handle logged-out scenarios.
- Validate scraped data structure.
- Implement retry logic for failed scrapes.
- Store only essential job data.
- Limit stored jobs (use `chrome.storage.local`).
### Webhook Integration
- Validate webhook URLs.
- Handle webhook failures gracefully (retry logic, logging).
- Include relevant job data in payload.
- Add timeout for webhook requests.
- Log success/failure.

## Error Handling & Security
- Wrap background operations in try/catch.
- Log errors to console and activity log.
- Use Sentry for error reporting (but don't edit `sentry.js`).
- Validate all inputs (user inputs, webhook URLs).
- Sanitize data where necessary.
- Follow Content Security Policies (CSP).

## UI/UX (Dark Theme)
- Use consistent em-based spacing.
- Implement responsive design.
- Show loading states.
- Provide clear user feedback.
- Keep the interface clean and minimal.

## Performance
- Minimize DOM operations.
- Use efficient selectors.
- Implement proper cleanup (event listeners, cached data).
- Cache frequently accessed data.
- Use debounce for frequent operations (e.g., UI updates).
- Clear unused data periodically (e.g., old jobs in local storage).
